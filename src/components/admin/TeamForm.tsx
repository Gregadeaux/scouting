'use client';

import React, { useState } from 'react';
import { TeamFormData, FormErrors } from '@/types/admin';
import { Input } from '@/components/ui/Input';
import { Button } from '@/components/ui/Button';

interface TeamFormProps {
  initialData?: Partial<TeamFormData>;
  onSubmit: (data: TeamFormData) => Promise<void>;
  onCancel: () => void;
  isEdit?: boolean;
}

export function TeamForm({ initialData, onSubmit, onCancel, isEdit = false }: TeamFormProps) {
  const [formData, setFormData] = useState<TeamFormData>({
    team_number: initialData?.team_number || 0,
    team_key: initialData?.team_key || '',
    team_name: initialData?.team_name || '',
    team_nickname: initialData?.team_nickname || '',
    city: initialData?.city || '',
    state_province: initialData?.state_province || '',
    country: initialData?.country || 'USA',
    postal_code: initialData?.postal_code || '',
    rookie_year: initialData?.rookie_year || undefined,
    website: initialData?.website || '',
  });

  const [errors, setErrors] = useState<FormErrors>({});
  const [submitting, setSubmitting] = useState(false);

  const handleChange = (field: keyof TeamFormData, value: TeamFormData[typeof field]) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors((prev) => ({ ...prev, [field]: '' }));
    }

    // Auto-generate team_key from team_number
    if (field === 'team_number') {
      setFormData((prev) => ({ ...prev, team_key: `frc${value}` }));
    }
  };

  const validate = (): boolean => {
    const newErrors: FormErrors = {};

    if (!formData.team_number || formData.team_number < 1) {
      newErrors.team_number = 'Valid team number is required';
    }
    // team_key is auto-generated by database, so don't validate it
    if (!formData.team_name.trim()) {
      newErrors.team_name = 'Team name is required';
    }
    if (formData.rookie_year && (formData.rookie_year < 1992 || formData.rookie_year > new Date().getFullYear())) {
      newErrors.rookie_year = 'Invalid rookie year';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validate()) return;

    setSubmitting(true);
    try {
      // Exclude team_key from submission (it's auto-generated by database)
      const { team_key, ...dataToSubmit } = formData;
      await onSubmit(dataToSubmit as TeamFormData);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="grid gap-6 md:grid-cols-2">
        <Input
          label="Team Number *"
          type="number"
          value={formData.team_number || ''}
          onChange={(e) => handleChange('team_number', parseInt(e.target.value))}
          error={errors.team_number}
          placeholder="930"
          disabled={isEdit}
          min={1}
        />

        <Input
          label="Team Key (Auto-generated)"
          value={formData.team_key}
          onChange={(e) => handleChange('team_key', e.target.value)}
          placeholder="frc930"
          disabled={true}
          helpText="Automatically generated from team number"
        />
      </div>

      <Input
        label="Team Name *"
        value={formData.team_name}
        onChange={(e) => handleChange('team_name', e.target.value)}
        error={errors.team_name}
        placeholder="The Zebracorns"
      />

      <Input
        label="Nickname"
        value={formData.team_nickname || ''}
        onChange={(e) => handleChange('team_nickname', e.target.value)}
        placeholder="Zebracorns"
      />

      <div className="grid gap-6 md:grid-cols-2">
        <Input
          label="City"
          value={formData.city || ''}
          onChange={(e) => handleChange('city', e.target.value)}
          placeholder="Fremont"
        />

        <Input
          label="State/Province"
          value={formData.state_province || ''}
          onChange={(e) => handleChange('state_province', e.target.value)}
          placeholder="CA"
        />
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        <Input
          label="Country"
          value={formData.country || ''}
          onChange={(e) => handleChange('country', e.target.value)}
          placeholder="USA"
        />

        <Input
          label="Postal Code"
          value={formData.postal_code || ''}
          onChange={(e) => handleChange('postal_code', e.target.value)}
          placeholder="94539"
        />
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        <Input
          label="Rookie Year"
          type="number"
          value={formData.rookie_year || ''}
          onChange={(e) => handleChange('rookie_year', e.target.value ? parseInt(e.target.value) : undefined)}
          error={errors.rookie_year}
          min={1992}
          max={new Date().getFullYear()}
        />

        <Input
          label="Website"
          type="url"
          value={formData.website || ''}
          onChange={(e) => handleChange('website', e.target.value)}
          placeholder="https://team930.com"
        />
      </div>

      <div className="flex justify-end gap-3 border-t border-gray-200 pt-6 dark:border-gray-700">
        <Button type="button" variant="secondary" onClick={onCancel}>
          Cancel
        </Button>
        <Button type="submit" disabled={submitting}>
          {submitting ? 'Saving...' : isEdit ? 'Update Team' : 'Add Team'}
        </Button>
      </div>
    </form>
  );
}
